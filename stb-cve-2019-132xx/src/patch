diff --git a/fuzz/build_libfuzzer.sh b/fuzz/build_libfuzzer.sh
new file mode 100755
index 0000000..e58d164
--- /dev/null
+++ b/fuzz/build_libfuzzer.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+clang++ -I. -fsanitize=address,fuzzer -g stb_vorbis.c fuzz/fuzz.cpp -o stb-vorbis-libfuzzer
diff --git a/fuzz/build_standalone.sh b/fuzz/build_standalone.sh
new file mode 100755
index 0000000..8577b18
--- /dev/null
+++ b/fuzz/build_standalone.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+clang++ -I. -DNDEBUG -g stb_vorbis.c fuzz/fuzz.cpp fuzz/driver.cpp -o stb-vorbis-standalone
diff --git a/fuzz/driver.cpp b/fuzz/driver.cpp
new file mode 100644
index 0000000..0943be1
--- /dev/null
+++ b/fuzz/driver.cpp
@@ -0,0 +1,49 @@
+#include <stddef.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <unistd.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fcntl.h>
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size);
+
+bool run_one_test(char *filename) {
+  int fd = open(filename, O_RDONLY);
+  if (fd == -1) {
+    return false;
+  }
+
+  struct stat st;
+  if (fstat(fd, &st) == -1) {
+    close(fd);
+    return false;
+  }
+  size_t size = st.st_size;
+
+  void *data = mmap(NULL, size, PROT_READ, MAP_PRIVATE, fd, 0);
+  if (data == (void *)-1) {
+    close(fd);
+    return false;
+  }
+
+  LLVMFuzzerTestOneInput(reinterpret_cast<const uint8_t *>(data), size);
+  /* ignore failures on cleanup */
+  munmap(data, size);
+  close(fd);
+  return true;
+}
+
+int main(int argc, char **argv) {
+  for (int i = 1; i < argc; i++) {
+    char *filename = argv[i];
+    if (!run_one_test(filename)) {
+      printf("Warning: failed to run %s\n", filename);
+    } else {
+      printf("Successfully tested %s\n", filename);
+    }
+  }
+}
+
diff --git a/fuzz/fuzz.cpp b/fuzz/fuzz.cpp
new file mode 100644
index 0000000..03897ca
--- /dev/null
+++ b/fuzz/fuzz.cpp
@@ -0,0 +1,17 @@
+#include <stdint.h>
+#include <stdlib.h>
+
+#define STB_VORBIS_HEADER_ONLY
+#include "stb_vorbis.c"
+#include "stb.h"
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+   int chan, samplerate;
+   short *output = NULL;
+   int samples = stb_vorbis_decode_memory(data, size, &chan, &samplerate, &output);
+
+   if (output)
+       free(output);
+
+   return 0;
+}
