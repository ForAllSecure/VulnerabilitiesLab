diff --git a/fuzz/build_libfuzzer.sh b/fuzz/build_libfuzzer.sh
new file mode 100755
index 0000000..629b08f
--- /dev/null
+++ b/fuzz/build_libfuzzer.sh
@@ -0,0 +1,3 @@
+#! /bin/bash
+
+clang++ -fsanitize=address,fuzzer -g -Isrc fuzz/fuzz.cpp src/.libs/libmatio.a -lz -o matio-libfuzzer
diff --git a/fuzz/build_standalone.sh b/fuzz/build_standalone.sh
new file mode 100755
index 0000000..698746a
--- /dev/null
+++ b/fuzz/build_standalone.sh
@@ -0,0 +1,3 @@
+#! /bin/bash
+
+clang++ -g -Isrc fuzz/fuzz.cpp fuzz/driver.cpp src/.libs/libmatio.a -lz -o matio-standalone
diff --git a/fuzz/configure_libfuzzer.sh b/fuzz/configure_libfuzzer.sh
new file mode 100755
index 0000000..a689d1d
--- /dev/null
+++ b/fuzz/configure_libfuzzer.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+CC=clang CXX=clang++ CFLAGS="-fsanitize=address,fuzzer-no-link -g" CXXFLAGS="-fsanitize=address,fuzzer-no-link -g" ./configure
diff --git a/fuzz/configure_standalone.sh b/fuzz/configure_standalone.sh
new file mode 100755
index 0000000..a6a827e
--- /dev/null
+++ b/fuzz/configure_standalone.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+CC=clang CXX=clang++ ./configure
diff --git a/fuzz/driver.cpp b/fuzz/driver.cpp
new file mode 100644
index 0000000..0943be1
--- /dev/null
+++ b/fuzz/driver.cpp
@@ -0,0 +1,49 @@
+#include <stddef.h>
+#include <stdbool.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <unistd.h>
+#include <sys/mman.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fcntl.h>
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size);
+
+bool run_one_test(char *filename) {
+  int fd = open(filename, O_RDONLY);
+  if (fd == -1) {
+    return false;
+  }
+
+  struct stat st;
+  if (fstat(fd, &st) == -1) {
+    close(fd);
+    return false;
+  }
+  size_t size = st.st_size;
+
+  void *data = mmap(NULL, size, PROT_READ, MAP_PRIVATE, fd, 0);
+  if (data == (void *)-1) {
+    close(fd);
+    return false;
+  }
+
+  LLVMFuzzerTestOneInput(reinterpret_cast<const uint8_t *>(data), size);
+  /* ignore failures on cleanup */
+  munmap(data, size);
+  close(fd);
+  return true;
+}
+
+int main(int argc, char **argv) {
+  for (int i = 1; i < argc; i++) {
+    char *filename = argv[i];
+    if (!run_one_test(filename)) {
+      printf("Warning: failed to run %s\n", filename);
+    } else {
+      printf("Successfully tested %s\n", filename);
+    }
+  }
+}
+
diff --git a/fuzz/fuzz.cpp b/fuzz/fuzz.cpp
new file mode 100644
index 0000000..a3e83a2
--- /dev/null
+++ b/fuzz/fuzz.cpp
@@ -0,0 +1,41 @@
+#include <stdint.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+#include <matio.h>
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) {
+    char filename[256];
+    sprintf(filename, "/dev/shm/libfuzzer.%d", getpid());
+
+    FILE *fp = fopen(filename, "wb");
+    if (!fp)
+        return 0;
+
+    fwrite(data, size, 1, fp);
+    fclose(fp);
+
+    mat_t *mat;
+    matvar_t *var;
+
+    mat = Mat_Open(filename, MAT_ACC_RDONLY);
+    if (!mat)
+        goto out;
+
+    for (;;) {
+        var = Mat_VarReadNextInfo(mat);
+        if (!var)
+            goto out;
+
+        if (Mat_VarReadDataAll(mat, var))
+            goto out;
+
+        Mat_VarFree(var);
+    }
+
+out:
+    Mat_Close(mat);
+    unlink(filename);
+
+    return 0;
+}
