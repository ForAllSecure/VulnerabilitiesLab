#!/usr/bin/env python3

# Run this script and write the output to function_calls.h
# python3 generate_function_calls.py >function_calls.h

# Function declarations were extracted from musl libc math.h and complex.h

import re

functions = [ \
"double      acos(double);",
"double      acosh(double);",
"double      asin(double);",
"double      asinh(double);",
"double      atan(double);",
"double      atan2(double, double);",
"double      atanh(double);",
"double      cbrt(double);",
"double      ceil(double);",
"double      copysign(double, double);",
"double      cos(double);",
"double      cosh(double);",
"double      drem(double, double);",
"double      erf(double);",
"double      erfc(double);",
"double      exp(double);",
"double      exp10(double);",
"double      exp2(double);",
"double      expm1(double);",
"double      fabs(double);",
"double      fdim(double, double);",
"double      floor(double);",
"double      fma(double, double, double);",
"double      fmax(double, double);",
"double      fmin(double, double);",
"double      fmod(double, double);",
"double      frexp(double, int *);",
"double      hypot(double, double);",
"double      j0(double);",
"double      j1(double);",
"double      jn(int, double);",
"double      ldexp(double, int);",
"double      lgamma(double);",
"double      lgamma_r(double, int*);",
"double      log(double);",
"double      log10(double);",
"double      log1p(double);",
"double      log2(double);",
"double      logb(double);",
"double      modf(double, double *);",
"double      nan(const char *);",
"double      nearbyint(double);",
"double      nextafter(double, double);",
"double      nexttoward(double, long double);",
"double      pow(double, double);",
"double      pow10(double);",
"double      remainder(double, double);",
"double      remquo(double, double, int *);",
"double      rint(double);",
"double      round(double);",
"double      scalb(double, double);",
"double      scalbln(double, long);",
"double      scalbn(double, int);",
"double      significand(double);",
"double      sin(double);",
"double      sinh(double);",
"double      sqrt(double);",
"double      tan(double);",
"double      tanh(double);",
"double      tgamma(double);",
"double      trunc(double);",
"double      y0(double);",
"double      y1(double);",
"double      yn(int, double);",
"float       acosf(float);",
"float       acoshf(float);",
"float       asinf(float);",
"float       asinhf(float);",
"float       atan2f(float, float);",
"float       atanf(float);",
"float       atanhf(float);",
"float       cbrtf(float);",
"float       ceilf(float);",
"float       copysignf(float, float);",
"float       cosf(float);",
"float       coshf(float);",
"float       dremf(float, float);",
"float       erfcf(float);",
"float       erff(float);",
"float       exp10f(float);",
"float       exp2f(float);",
"float       expf(float);",
"float       expm1f(float);",
"float       fabsf(float);",
"float       fdimf(float, float);",
"float       floorf(float);",
"float       fmaf(float, float, float);",
"float       fmaxf(float, float);",
"float       fminf(float, float);",
"float       fmodf(float, float);",
"float       frexpf(float, int *);",
"float       hypotf(float, float);",
"float       j0f(float);",
"float       j1f(float);",
"float       jnf(int, float);",
"float       ldexpf(float, int);",
"float       lgammaf(float);",
"float       lgammaf_r(float, int*);",
"float       log10f(float);",
"float       log1pf(float);",
"float       log2f(float);",
"float       logbf(float);",
"float       logf(float);",
"float       modff(float, float *);",
"float       nanf(const char *);",
"float       nearbyintf(float);",
"float       nextafterf(float, float);",
"float       nexttowardf(float, long double);",
"float       pow10f(float);",
"float       powf(float, float);",
"float       remainderf(float, float);",
"float       remquof(float, float, int *);",
"float       rintf(float);",
"float       roundf(float);",
"float       scalbf(float, float);",
"float       scalblnf(float, long);",
"float       scalbnf(float, int);",
"float       significandf(float);",
"float       sinf(float);",
"float       sinhf(float);",
"float       sqrtf(float);",
"float       tanf(float);",
"float       tanhf(float);",
"float       tgammaf(float);",
"float       truncf(float);",
"float       y0f(float);",
"float       y1f(float);",
"float       ynf(int, float);",
"int         finite(double);",
"int         finitef(float);",
"int         ilogb(double);",
"int         ilogbf(float);",
"int         ilogbl(long double);",
"long        lrint(double);",
"long        lrintf(float);",
"long        lrintl(long double);",
"long        lround(double);",
"long        lroundf(float);",
"long        lroundl(long double);",
"long double acoshl(long double);",
"long double acosl(long double);",
"long double asinhl(long double);",
"long double asinl(long double);",
"long double atan2l(long double, long double);",
"long double atanhl(long double);",
"long double atanl(long double);",
"long double cbrtl(long double);",
"long double ceill(long double);",
"long double copysignl(long double, long double);",
"long double coshl(long double);",
"long double cosl(long double);",
"long double erfcl(long double);",
"long double erfl(long double);",
"long double exp10l(long double);",
"long double exp2l(long double);",
"long double expl(long double);",
"long double expm1l(long double);",
"long double fabsl(long double);",
"long double fdiml(long double, long double);",
"long double floorl(long double);",
"long double fmal(long double, long double, long double);",
"long double fmaxl(long double, long double);",
"long double fminl(long double, long double);",
"long double fmodl(long double, long double);",
"long double frexpl(long double, int *);",
"long double hypotl(long double, long double);",
"long double ldexpl(long double, int);",
"long double lgammal(long double);",
"long double lgammal_r(long double, int*);",
"long double log10l(long double);",
"long double log1pl(long double);",
"long double log2l(long double);",
"long double logbl(long double);",
"long double logl(long double);",
"long double modfl(long double, long double *);",
"long double nanl(const char *);",
"long double nearbyintl(long double);",
"long double nextafterl(long double, long double);",
"long double nexttowardl(long double, long double);",
"long double pow10l(long double);",
"long double powl(long double, long double);",
"long double remainderl(long double, long double);",
"long double remquol(long double, long double, int *);",
"long double rintl(long double);",
"long double roundl(long double);",
"long double scalblnl(long double, long);",
"long double scalbnl(long double, int);",
"long double sinhl(long double);",
"long double sinl(long double);",
"long double sqrtl(long double);",
"long double tanhl(long double);",
"long double tanl(long double);",
"long double tgammal(long double);",
"long double truncl(long double);",
"long long   llrint(double);",
"long long   llrintf(float);",
"long long   llrintl(long double);",
"long long   llround(double);",
"long long   llroundf(float);",
"long long   llroundl(long double);",
"void sincos(double, double*, double*);",
"void sincosf(float, float*, float*);",
"void sincosl(long double, long double*, long double*);",
"double cabs(double complex);",
"double carg(double complex);",
"double cimag(double complex);",
"double complex cacos(double complex);",
"double complex cacosh(double complex);",
"double complex casin(double complex);",
"double complex casinh(double complex);",
"double complex catan(double complex);",
"double complex catanh(double complex);",
"double complex ccos(double complex);",
"double complex ccosh(double complex);",
"double complex cexp(double complex);",
"double complex clog(double complex);",
"double complex conj(double complex);",
"double complex cpow(double complex, double complex);",
"double complex cproj(double complex);",
"double complex csin(double complex);",
"double complex csinh(double complex);",
"double complex csqrt(double complex);",
"double complex ctan(double complex);",
"double complex ctanh(double complex);",
"double creal(double complex);",
"float cabsf(float complex);",
"float cargf(float complex);",
"float cimagf(float complex);",
"float complex cacosf(float complex);",
"float complex cacoshf(float complex);",
"float complex casinf(float complex);",
"float complex casinhf(float complex);",
"float complex catanf(float complex);",
"float complex catanhf(float complex);",
"float complex ccosf(float complex);",
"float complex ccoshf(float complex);",
"float complex cexpf(float complex);",
"float complex clogf(float complex);",
"float complex conjf(float complex);",
"float complex cpowf(float complex, float complex);",
"float complex cprojf(float complex);",
"float complex csinf(float complex);",
"float complex csinhf(float complex);",
"float complex csqrtf(float complex);",
"float complex ctanf(float complex);",
"float complex ctanhf(float complex);",
"float crealf(float complex);",
"long double cabsl(long double complex);",
"long double cargl(long double complex);",
"long double cimagl(long double complex);",
"long double complex cacoshl(long double complex);",
"long double complex cacosl(long double complex);",
"long double complex casinhl(long double complex);",
"long double complex casinl(long double complex);",
"long double complex catanhl(long double complex);",
"long double complex catanl(long double complex);",
"long double complex ccoshl(long double complex);",
"long double complex ccosl(long double complex);",
"long double complex cexpl(long double complex);",
"long double complex clogl(long double complex);",
"long double complex conjl(long double complex);",
"long double complex cpowl(long double complex, long double complex);",
"long double complex cprojl(long double complex);",
"long double complex csinhl(long double complex);",
"long double complex csinl(long double complex);",
"long double complex csqrtl(long double complex);",
"long double complex ctanhl(long double complex);",
"long double complex ctanl(long double complex);",
"long double creall(long double complex);"]

# Set unsupported_fns to [] if compiling against musl libc
unsupported_fns = ["pow10", "pow10l", "pow10f"]

def are_argument_types_valid(argtypes):
    valid_types = ['long double', 'double', 'float', 'double complex', 'float complex', 'long', 'long double complex']

    for at in argtypes:
        if at not in valid_types:
            return False
    
    return True

for fn in functions:
    match = re.match(r'^(.*)\b([a-z0-9_]+)\((.*)\);$', fn)
    assert(match)

    return_type = match.group(1).strip()

    name = match.group(2)
    if name in unsupported_fns:
        continue

    argtypes = [at.strip() for at in match.group(3).split(',')]
    if not are_argument_types_valid(argtypes):
        continue

    if len(argtypes) == 1:
        print("CALL_MATH_FUNC1({}, {}, {});".format(return_type, name, argtypes[0]))
    elif len(argtypes) == 2:
        print("CALL_MATH_FUNC2({}, {}, {}, {});".format(return_type, name, *argtypes[0:2]))
    elif len(argtypes) == 3:
        print("CALL_MATH_FUNC3({}, {}, {}, {}, {});".format(return_type, name, *argtypes[0:3]))
    elif len(argtypes) >= 4:
        assert(0)
